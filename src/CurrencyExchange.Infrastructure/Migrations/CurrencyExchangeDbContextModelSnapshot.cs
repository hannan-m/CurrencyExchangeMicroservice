// <auto-generated />
using System;
using CurrencyExchange.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CurrencyExchange.Infrastructure.Migrations
{
    [DbContext(typeof(CurrencyExchangeDbContext))]
    partial class CurrencyExchangeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("CurrencyExchange.Core.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Clients", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "client1@medirect.com",
                            Name = "Client 1"
                        },
                        new
                        {
                            Id = 2,
                            Email = "client2@medirect.com",
                            Name = "Client 2"
                        },
                        new
                        {
                            Id = 3,
                            Email = "client3@medirect.com",
                            Name = "Client 3"
                        });
                });

            modelBuilder.Entity("CurrencyExchange.Core.Entities.CurrencyExchangeTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("ClientId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("SourceCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TargetCurrency")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("CurrencyExchangeTransactions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 100m,
                            ClientId = 1,
                            Rate = 1.2m,
                            SourceCurrency = 0,
                            TargetCurrency = 1,
                            Timestamp = new DateTime(2023, 4, 12, 22, 57, 35, 171, DateTimeKind.Utc).AddTicks(7236)
                        },
                        new
                        {
                            Id = 2,
                            Amount = 200m,
                            ClientId = 2,
                            Rate = 0.8m,
                            SourceCurrency = 1,
                            TargetCurrency = 0,
                            Timestamp = new DateTime(2023, 4, 12, 21, 57, 35, 171, DateTimeKind.Utc).AddTicks(7248)
                        },
                        new
                        {
                            Id = 3,
                            Amount = 150m,
                            ClientId = 3,
                            Rate = 1.1m,
                            SourceCurrency = 0,
                            TargetCurrency = 2,
                            Timestamp = new DateTime(2023, 4, 12, 20, 57, 35, 171, DateTimeKind.Utc).AddTicks(7250)
                        });
                });

            modelBuilder.Entity("CurrencyExchange.Core.Entities.CurrencyExchangeTransaction", b =>
                {
                    b.HasOne("CurrencyExchange.Core.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });
#pragma warning restore 612, 618
        }
    }
}
